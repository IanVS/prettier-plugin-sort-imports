// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`imports-with-decorators.js - typescript-verify > imports-with-decorators.js 1`] = `
import { Body, Controller, HttpService, Logger, Post } from "@core/common";
import { retry } from "@server/operators";

import { DesignTemplate, DesignTextElement } from "@server/design/interfaces";

import { RuntimeException } from "@server/core/errors/exceptions/runtime.exception";
import { TemplateService } from "../service/template.service";
import { UpdateTextDao } from "./update-text.dao";
import { TextRender } from "@ui/design/render";
import { CanvasKitService } from "../../../thrid-party/canvas-kit/canvas-kit.service";
import { CanvasKit } from "@ui/canvaskit-wasm";

@Controller("/design/template")
export class TemplateController {
  requestFile: (url) => Promise<ArrayBuffer>;
  CanvasKit: CanvasKit;

  constructor(private templateService: TemplateService, private _httpService: HttpService,
              private _canvaskitService: CanvasKitService) {


    this.CanvasKit = this._canvaskitService.canvasKit;
    this.requestFile = (url) => {
      const req = this._httpService
        .get<ArrayBuffer>(\`http:\${url}\`, { responseType: "arraybuffer" })
        .pipe(retry(3))
        .toPromise();
      return new Promise<ArrayBuffer>((resolve, reject) => {
        req
          .then((resp) => {
            resolve(resp.data);
          })
          .catch(reject);
      });
    };
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import { Body, Controller, HttpService, Logger, Post } from "@core/common";
import { RuntimeException } from "@server/core/errors/exceptions/runtime.exception";
import { DesignTemplate, DesignTextElement } from "@server/design/interfaces";
import { retry } from "@server/operators";
import { CanvasKit } from "@ui/canvaskit-wasm";
import { TextRender } from "@ui/design/render";
import { CanvasKitService } from "../../../thrid-party/canvas-kit/canvas-kit.service";
import { TemplateService } from "../service/template.service";
import { UpdateTextDao } from "./update-text.dao";

@Controller("/design/template")
export class TemplateController {
    requestFile: (url) => Promise<ArrayBuffer>;
    CanvasKit: CanvasKit;

    constructor(
        private templateService: TemplateService,
        private _httpService: HttpService,
        private _canvaskitService: CanvasKitService
    ) {
        this.CanvasKit = this._canvaskitService.canvasKit;
        this.requestFile = (url) => {
            const req = this._httpService
                .get<ArrayBuffer>(\`http:\${url}\`, {
                    responseType: "arraybuffer",
                })
                .pipe(retry(3))
                .toPromise();
            return new Promise<ArrayBuffer>((resolve, reject) => {
                req.then((resp) => {
                    resolve(resp.data);
                }).catch(reject);
            });
        };
    }
}

`;

exports[`imports-with-side-effect-imports.js - typescript-verify > imports-with-side-effect-imports.js 1`] = `
// I am top level comment in this file.

import thirdParty0 from "third-party0";
import something3 from "@core/something3";
import thirdDisco0 from "third-disco0";
import otherthing3 from "@core/otherthing3";

import "side-effect-z";

import anotherSameLevelRelativePath3 from "./anotherSameLevelRelativePath3";
import something0 from "@core/something0";
import thirdDisco1 from "third-disco1";
import otherthing0 from "@core/otherthing0";
import sameLevelRelativePath3 from "./sameLevelRelativePath3";
import thirdParty1 from "third-party1";
import oneLevelRelativePath1 from "../oneLevelRelativePath1";
import anotherOneLevelRelativePath1 from "../anotherOneLevelRelativePath1";

import "side-effect-y3";
import "side-effect-y1";
import "side-effect-y2";

import oneLevelRelativePath2 from "../oneLevelRelativePath2";
import anotherOneLevelRelativePath2 from "../anotherOneLevelRelativePath2";
import something2 from "@core/something2";
import thirdParty3 from "third-party3";
import anotherSameLevelRelativePath1 from "./anotherSameLevelRelativePath1";
import sameLevelRelativePath1 from "./sameLevelRelativePath1";
import otherthing2 from "@core/otherthing2";
import thirdDisco3 from "third-disco3";

import "side-effect-x";
import anotherSameLevelRelativePath2 from "./anotherSameLevelRelativePath2";
import sameLevelRelativePath2 from "./sameLevelRelativePath2";
import something1 from "@core/something1";
import oneLevelRelativePath3 from "../oneLevelRelativePath3";
import anotherOneLevelRelativePath3 from "../anotherOneLevelRelativePath3";
import otherthing1 from "@core/otherthing1";
import thirdDisco2 from "third-disco2";
import thirdParty2 from "third-party2";

import { Component } from "@angular/core";

@Controller("/design/template")
export class TemplateController {
  requestFile: (url) => Promise<ArrayBuffer>;
  CanvasKit: CanvasKit;

  constructor(private templateService: TemplateService, private _httpService: HttpService,
              private _canvaskitService: CanvasKitService) {


    this.CanvasKit = this._canvaskitService.canvasKit;
    this.requestFile = (url) => {
      const req = this._httpService
        .get<ArrayBuffer>(\`http:\${url}\`, { responseType: "arraybuffer" })
        .pipe(retry(3))
        .toPromise();
      return new Promise<ArrayBuffer>((resolve, reject) => {
        req
          .then((resp) => {
            resolve(resp.data);
          })
          .catch(reject);
      });
    };
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// I am top level comment in this file.

import thirdDisco0 from "third-disco0";
import thirdParty0 from "third-party0";
import otherthing3 from "@core/otherthing3";
import something3 from "@core/something3";
import "side-effect-z";
import thirdDisco1 from "third-disco1";
import thirdParty1 from "third-party1";
import otherthing0 from "@core/otherthing0";
import something0 from "@core/something0";
import anotherOneLevelRelativePath1 from "../anotherOneLevelRelativePath1";
import oneLevelRelativePath1 from "../oneLevelRelativePath1";
import anotherSameLevelRelativePath3 from "./anotherSameLevelRelativePath3";
import sameLevelRelativePath3 from "./sameLevelRelativePath3";
import "side-effect-y3";
import "side-effect-y1";
import "side-effect-y2";
import thirdDisco3 from "third-disco3";
import thirdParty3 from "third-party3";
import otherthing2 from "@core/otherthing2";
import something2 from "@core/something2";
import anotherOneLevelRelativePath2 from "../anotherOneLevelRelativePath2";
import oneLevelRelativePath2 from "../oneLevelRelativePath2";
import anotherSameLevelRelativePath1 from "./anotherSameLevelRelativePath1";
import sameLevelRelativePath1 from "./sameLevelRelativePath1";
import "side-effect-x";
import { Component } from "@angular/core";
import thirdDisco2 from "third-disco2";
import thirdParty2 from "third-party2";
import otherthing1 from "@core/otherthing1";
import something1 from "@core/something1";
import anotherOneLevelRelativePath3 from "../anotherOneLevelRelativePath3";
import oneLevelRelativePath3 from "../oneLevelRelativePath3";
import anotherSameLevelRelativePath2 from "./anotherSameLevelRelativePath2";
import sameLevelRelativePath2 from "./sameLevelRelativePath2";

@Controller("/design/template")
export class TemplateController {
    requestFile: (url) => Promise<ArrayBuffer>;
    CanvasKit: CanvasKit;

    constructor(
        private templateService: TemplateService,
        private _httpService: HttpService,
        private _canvaskitService: CanvasKitService
    ) {
        this.CanvasKit = this._canvaskitService.canvasKit;
        this.requestFile = (url) => {
            const req = this._httpService
                .get<ArrayBuffer>(\`http:\${url}\`, {
                    responseType: "arraybuffer",
                })
                .pipe(retry(3))
                .toPromise();
            return new Promise<ArrayBuffer>((resolve, reject) => {
                req.then((resp) => {
                    resolve(resp.data);
                }).catch(reject);
            });
        };
    }
}

`;
